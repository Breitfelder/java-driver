// Package jdt defines constants from Eclipse JDT AST.
package jdt

// GENERATED BY java-driver GoGen
// DO NOT EDIT

import "github.com/bblfsh/sdk/uast/ann"

// Eclipse JDT node types.
// This includes all non-abstract classes extending from ASTNode.
// See http://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.isv%2Freference%2Fapi%2Findex.html&overview-summary.html
var (
	AnnotationTypeDeclaration       = ann.HasInternalType("AnnotationTypeDeclaration")
	AnnotationTypeMemberDeclaration = ann.HasInternalType("AnnotationTypeMemberDeclaration")
	AnonymousClassDeclaration       = ann.HasInternalType("AnonymousClassDeclaration")
	ArrayAccess                     = ann.HasInternalType("ArrayAccess")
	ArrayCreation                   = ann.HasInternalType("ArrayCreation")
	ArrayInitializer                = ann.HasInternalType("ArrayInitializer")
	ArrayType                       = ann.HasInternalType("ArrayType")
	AssertStatement                 = ann.HasInternalType("AssertStatement")
	Assignment                      = ann.HasInternalType("Assignment")
	Block                           = ann.HasInternalType("Block")
	BlockComment                    = ann.HasInternalType("BlockComment")
	BooleanLiteral                  = ann.HasInternalType("BooleanLiteral")
	BreakStatement                  = ann.HasInternalType("BreakStatement")
	CastExpression                  = ann.HasInternalType("CastExpression")
	CatchClause                     = ann.HasInternalType("CatchClause")
	CharacterLiteral                = ann.HasInternalType("CharacterLiteral")
	ClassInstanceCreation           = ann.HasInternalType("ClassInstanceCreation")
	CompilationUnit                 = ann.HasInternalType("CompilationUnit")
	ConditionalExpression           = ann.HasInternalType("ConditionalExpression")
	ConstructorInvocation           = ann.HasInternalType("ConstructorInvocation")
	ContinueStatement               = ann.HasInternalType("ContinueStatement")
	CreationReference               = ann.HasInternalType("CreationReference")
	Dimension                       = ann.HasInternalType("Dimension")
	DoStatement                     = ann.HasInternalType("DoStatement")
	EmptyStatement                  = ann.HasInternalType("EmptyStatement")
	EnhancedForStatement            = ann.HasInternalType("EnhancedForStatement")
	EnumConstantDeclaration         = ann.HasInternalType("EnumConstantDeclaration")
	EnumDeclaration                 = ann.HasInternalType("EnumDeclaration")
	ExpressionMethodReference       = ann.HasInternalType("ExpressionMethodReference")
	ExpressionStatement             = ann.HasInternalType("ExpressionStatement")
	FieldAccess                     = ann.HasInternalType("FieldAccess")
	FieldDeclaration                = ann.HasInternalType("FieldDeclaration")
	ForStatement                    = ann.HasInternalType("ForStatement")
	IfStatement                     = ann.HasInternalType("IfStatement")
	ImportDeclaration               = ann.HasInternalType("ImportDeclaration")
	InfixExpression                 = ann.HasInternalType("InfixExpression")
	Initializer                     = ann.HasInternalType("Initializer")
	InstanceofExpression            = ann.HasInternalType("InstanceofExpression")
	IntersectionType                = ann.HasInternalType("IntersectionType")
	Javadoc                         = ann.HasInternalType("Javadoc")
	LabeledStatement                = ann.HasInternalType("LabeledStatement")
	LambdaExpression                = ann.HasInternalType("LambdaExpression")
	LineComment                     = ann.HasInternalType("LineComment")
	MarkerAnnotation                = ann.HasInternalType("MarkerAnnotation")
	MemberRef                       = ann.HasInternalType("MemberRef")
	MemberValuePair                 = ann.HasInternalType("MemberValuePair")
	MethodDeclaration               = ann.HasInternalType("MethodDeclaration")
	MethodInvocation                = ann.HasInternalType("MethodInvocation")
	MethodRef                       = ann.HasInternalType("MethodRef")
	MethodRefParameter              = ann.HasInternalType("MethodRefParameter")
	Modifier                        = ann.HasInternalType("Modifier")
	NameQualifiedType               = ann.HasInternalType("NameQualifiedType")
	NormalAnnotation                = ann.HasInternalType("NormalAnnotation")
	NullLiteral                     = ann.HasInternalType("NullLiteral")
	NumberLiteral                   = ann.HasInternalType("NumberLiteral")
	PackageDeclaration              = ann.HasInternalType("PackageDeclaration")
	ParameterizedType               = ann.HasInternalType("ParameterizedType")
	ParenthesizedExpression         = ann.HasInternalType("ParenthesizedExpression")
	PostfixExpression               = ann.HasInternalType("PostfixExpression")
	PrefixExpression                = ann.HasInternalType("PrefixExpression")
	PrimitiveType                   = ann.HasInternalType("PrimitiveType")
	QualifiedName                   = ann.HasInternalType("QualifiedName")
	QualifiedType                   = ann.HasInternalType("QualifiedType")
	ReturnStatement                 = ann.HasInternalType("ReturnStatement")
	SimpleName                      = ann.HasInternalType("SimpleName")
	SimpleType                      = ann.HasInternalType("SimpleType")
	SingleMemberAnnotation          = ann.HasInternalType("SingleMemberAnnotation")
	SingleVariableDeclaration       = ann.HasInternalType("SingleVariableDeclaration")
	StringLiteral                   = ann.HasInternalType("StringLiteral")
	SuperConstructorInvocation      = ann.HasInternalType("SuperConstructorInvocation")
	SuperFieldAccess                = ann.HasInternalType("SuperFieldAccess")
	SuperMethodInvocation           = ann.HasInternalType("SuperMethodInvocation")
	SuperMethodReference            = ann.HasInternalType("SuperMethodReference")
	SwitchCase                      = ann.HasInternalType("SwitchCase")
	SwitchStatement                 = ann.HasInternalType("SwitchStatement")
	SynchronizedStatement           = ann.HasInternalType("SynchronizedStatement")
	TagElement                      = ann.HasInternalType("TagElement")
	TextElement                     = ann.HasInternalType("TextElement")
	ThisExpression                  = ann.HasInternalType("ThisExpression")
	ThrowStatement                  = ann.HasInternalType("ThrowStatement")
	TryStatement                    = ann.HasInternalType("TryStatement")
	TypeDeclaration                 = ann.HasInternalType("TypeDeclaration")
	TypeDeclarationStatement        = ann.HasInternalType("TypeDeclarationStatement")
	TypeLiteral                     = ann.HasInternalType("TypeLiteral")
	TypeMethodReference             = ann.HasInternalType("TypeMethodReference")
	TypeParameter                   = ann.HasInternalType("TypeParameter")
	UnionType                       = ann.HasInternalType("UnionType")
	VariableDeclarationExpression   = ann.HasInternalType("VariableDeclarationExpression")
	VariableDeclarationFragment     = ann.HasInternalType("VariableDeclarationFragment")
	VariableDeclarationStatement    = ann.HasInternalType("VariableDeclarationStatement")
	WhileStatement                  = ann.HasInternalType("WhileStatement")
	WildcardType                    = ann.HasInternalType("WildcardType")
)
