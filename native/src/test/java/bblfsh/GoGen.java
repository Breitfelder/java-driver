package bblfsh;

import org.eclipse.jdt.core.dom.ASTNode;
import org.junit.Test;
import org.reflections.Reflections;
import org.reflections.scanners.SubTypesScanner;
import org.reflections.util.ClasspathHelper;
import org.reflections.util.ConfigurationBuilder;

import java.io.PrintStream;
import java.lang.reflect.Modifier;
import java.util.*;

/**
 * GoGen generates Go code with constant definitions for UAST conversion.
 */
public class GoGen {

    @Test
    public void generate() {
        final PrintStream out = System.out;

        final List<Class<? extends ASTNode>> types = concreteSubTypesOf(ASTNode.class);
        types.sort(Comparator.comparing(Class::getCanonicalName));
        out.print(""
                + "// Package jdt defines constants from Eclipse JDT AST.\n"
                + "package jdt\n"
                + "// GENERATED BY java-driver GoGen\n"
                + "// DO NOT EDIT\n"
                + "\n"
                + "import \"github.com/bblfsh/sdk/uast/ann\"\n\n"
        );
        out.print(""
                + "// Eclipse JDT node types.\n"
                + "// This includes all non-abstract classes extending from ASTNode.\n"
                + "// See http://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.isv%2Freference%2Fapi%2Findex.html&overview-summary.html\n"
                + "const (\n"
        );
        for (final Class<? extends ASTNode> type : types) {
            out.printf("\t%s = ann.HasInternalType(\"%s\")\n", type.getSimpleName(), type.getSimpleName());
        }
        out.print(")\n");
    }

    private <T> List<Class<? extends T>> concreteSubTypesOf(final Class<? extends T> clazz) {
        final ConfigurationBuilder conf = new ConfigurationBuilder()
                .setUrls(ClasspathHelper.forClass(clazz))
                .setScanners(new SubTypesScanner(true));
        final Reflections reflections = new Reflections(conf);
        final List<Class<? extends T>> result = new ArrayList<>();
        for (final Class<? extends T> type : reflections.getSubTypesOf(clazz)) {
            if (type.isInterface()) {
                continue;
            }

            if (Modifier.isAbstract(type.getModifiers())) {
                continue;
            }

            result.add(type);
        }

        return result;
    }
}